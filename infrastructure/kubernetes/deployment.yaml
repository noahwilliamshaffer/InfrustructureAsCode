apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudops-frontend
  namespace: ${ENVIRONMENT:-cloudops}
  labels:
    app: cloudops-frontend
    tier: frontend
    app.kubernetes.io/name: cloudops-frontend
    app.kubernetes.io/instance: ${ENVIRONMENT:-production}
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: frontend
    app.kubernetes.io/part-of: cloudops-platform
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: cloudops-frontend
      tier: frontend
  template:
    metadata:
      labels:
        app: cloudops-frontend
        tier: frontend
        app.kubernetes.io/name: cloudops-frontend
        app.kubernetes.io/instance: ${ENVIRONMENT:-production}
    spec:
      serviceAccountName: cloudops-frontend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: frontend
        image: ${FRONTEND_IMAGE:-ghcr.io/noahwilliamshaffer/infrustructureasCode/frontend:latest}
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: ${ENVIRONMENT:-production}
        - name: NEXT_PUBLIC_API_URL
          value: "http://cloudops-backend.${ENVIRONMENT:-cloudops}.svc.cluster.local:8080"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: nextjs-cache
          mountPath: /app/.next/cache
      volumes:
      - name: tmp
        emptyDir: {}
      - name: nextjs-cache
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cloudops-frontend
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudops-backend
  namespace: ${ENVIRONMENT:-cloudops}
  labels:
    app: cloudops-backend
    tier: backend
    app.kubernetes.io/name: cloudops-backend
    app.kubernetes.io/instance: ${ENVIRONMENT:-production}
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: backend
    app.kubernetes.io/part-of: cloudops-platform
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: cloudops-backend
      tier: backend
  template:
    metadata:
      labels:
        app: cloudops-backend
        tier: backend
        app.kubernetes.io/name: cloudops-backend
        app.kubernetes.io/instance: ${ENVIRONMENT:-production}
    spec:
      serviceAccountName: cloudops-backend
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        fsGroup: 1001
      containers:
      - name: backend
        image: ${BACKEND_IMAGE:-ghcr.io/noahwilliamshaffer/infrustructureasCode/backend:latest}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        env:
        - name: NODE_ENV
          value: ${ENVIRONMENT:-production}
        - name: PORT
          value: "8080"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: cloudops-secrets
              key: database-url
        - name: FRONTEND_URL
          value: "http://cloudops-frontend.${ENVIRONMENT:-cloudops}.svc.cluster.local:3000"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /api/health/live
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /api/health/ready
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: tmp
          mountPath: /tmp
      volumes:
      - name: tmp
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - cloudops-backend
              topologyKey: kubernetes.io/hostname
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cloudops-postgres
  namespace: ${ENVIRONMENT:-cloudops}
  labels:
    app: cloudops-postgres
    tier: database
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/instance: ${ENVIRONMENT:-production}
    app.kubernetes.io/version: "15"
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: cloudops-platform
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: cloudops-postgres
      tier: database
  template:
    metadata:
      labels:
        app: cloudops-postgres
        tier: database
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/instance: ${ENVIRONMENT:-production}
    spec:
      serviceAccountName: cloudops-postgres
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgresql
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: cloudops_db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: cloudops-secrets
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cloudops-secrets
              key: postgres-password
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc 